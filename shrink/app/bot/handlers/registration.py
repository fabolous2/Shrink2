import re

from aiogram import Router,Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.bot.states import RegistrationStatesGroup

router=Router()


@router.message(RegistrationStatesGroup.WAIT_FOR_EMAIL)
async def form_email(message: Message, state: FSMContext, bot: Bot) -> None:
    email_reg = message.text
    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'

    if not re.match(email_pattern, email_reg):
        await message.answer("–ü–æ—á—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return
    
    await state.update_data(email_from=message.text)
    await state.set_state(RegistrationStatesGroup.WAIT_FOR_PASSWORD)
    # await update_get_email_from(message.from_user.id, email_reg)

    await bot.send_message(message.from_user.id,
                           text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")


@router.message(RegistrationStatesGroup.WAIT_FOR_PASSWORD)
async def form_email(message: Message, state: FSMContext):
    password=message.text
    user_id=message.from_user.id

    if len(password) < 19 or len(password) > 20 or re.search(r'\d', password) or not password.count(" ") == 3:
        await message.answer("""""", reply_markup=inline.profile_reg)
        await update_get_email_from(message.from_user.id, "None")
        await state.clear()
    await state.update_data(password=password)
    data = await state.get_data()
    await state.clear()
    formatted_text=[]
    [
        formatted_text.append(value)
        for key,value in data.items()
    ]
    print(formatted_text)
    await update_get_pwd_from(message.from_user.id,formatted_text[1])
    await update_get_email_from(user_id, formatted_text[0])

    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!")

    await message.answer(text=f"""üß∏ –ü—Ä–æ—Ñ–∏–ª—å {message.from_user.first_name}
‚Äî‚Äî‚Äî


‚úâÔ∏è Gmail:
‚îî {await get_email_from(user_id)}

üéü –ü–æ–¥–ø–∏—Å–∫–∞: 
‚îî {await get_premium(user_id)}
‚Äî‚Äî
<a href ="https://telegra.ph/Podpiska-na-Be-Twin-02-09">–û –ø–æ–¥–ø–∏—Å–∫–∞—Ö </a>""",
                     reply_markup=builder.inline_builder(
                         ["üß¨ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚¨Ö –ù–∞–∑–∞–¥"],
                         ["quit_profile", "main_menu"],
                         [1, 1]),
                         disable_web_page_preview=True,
                         parse_mode='html')


@router.message(Re_reg.re_reg_gmail)
async def re_reg_email(message: Message, state: FSMContext, bot: Bot):
    gmail_new = message.text
    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if not re.match(email_pattern, gmail_new):
        await message.answer("–ü–æ—á—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return
    await state.update_data(re_reg_email=gmail_new)
    await state.set_state(Re_reg.re_reg_pwd)
    await update_get_email_from(message.from_user.id, gmail_new)
    await bot.send_message(message.from_user.id,
                           text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")


@router.message(Re_reg.re_reg_pwd)
async def re_reg_email(message: Message, state: FSMContext):
    password = message.text
    user_id = message.from_user.id
    if len(password) < 19 or len(password) > 20 or re.search(r'\d', password) or not password.count(" ") == 3:
        await message.answer("""–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò© 
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É""", reply_markup=inline.profile_reg)
        await update_get_email_from(message.from_user.id, "None")
        await state.clear()
    await state.update_data(password=password)
    data = await state.get_data()
    await state.clear()
    formatted_text = []
    [
        formatted_text.append(value)
        for key, value in data.items()
    ]
    print(formatted_text)
    await update_get_pwd_from(message.from_user.id, formatted_text[1])
    await update_get_email_from(user_id, formatted_text[0])

    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!")

    await message.answer(text=f"""üß∏ –ü—Ä–æ—Ñ–∏–ª—å {message.from_user.first_name}
‚Äî‚Äî‚Äî


‚úâÔ∏è Gmail:
‚îî {await get_email_from(user_id)}

üéü –ü–æ–¥–ø–∏—Å–∫–∞: 
‚îî {await get_premium(user_id)}
‚Äî‚Äî
<a href ="https://telegra.ph/Podpiska-na-Be-Twin-02-09">–û –ø–æ–¥–ø–∏—Å–∫–∞—Ö </a>""",
                     reply_markup=builder.inline_builder(
                         ["üß¨ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚¨Ö –ù–∞–∑–∞–¥"],
                         ["quit_profile", "main_menu"],
                         [1, 1]),
                     disable_web_page_preview=True,
                     parse_mode='html')


