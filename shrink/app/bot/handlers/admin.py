from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from app.bot.keyboard import inline

admin = Router()


class Newsletter(StatesGroup):
    message = State()
    photo = State()
    confirm = State()


class AdminProtect(Filter):
    async def __call__(self, message: Message):
        return message.from_user.id in [6644596826]


@admin.callback_query(AdminProtect(), F.data.in_(["menu", "menu_after_photo"]))
@admin.message(AdminProtect(), Command('apanel'))
async def apanel(message: Message | CallbackQuery):
    if isinstance(message, Message):
        await message.answer("–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:",
                             reply_markup=inline_builder(
                                 ['üì™ –†–∞—Å—Å—ã–ª–∫–∞'],
                                 ['newsletter'],
                             ))
    else:
        if message.data == "menu":
            await message.message.edit_text("–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:",
                                            reply_markup=inline_builder(
                                                ['üì™ –†–∞—Å—Å—ã–ª–∫–∞'],
                                                ['newsletter'],
                                            ))
        else:
            await message.message.answer("–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:",
                                         reply_markup=inline_builder(
                                             ['üì™ –†–∞—Å—Å—ã–ª–∫–∞'],
                                             ['newsletter'],
                                         ))


@admin.callback_query(AdminProtect(), F.data == 'newsletter')
async def newsletter(query: CallbackQuery, state: FSMContext):
    await state.set_state(Newsletter.message)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


@admin.message(AdminProtect(), Newsletter.message)
async def newsletter_message(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await state.set_state(Newsletter.photo)
    await message.answer("üì∑ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", reply_markup=inline_builder(
        ["üìÆ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å"],
        ["sup_cancel_admin"],
        [1]
    ))


@admin.message(AdminProtect(), Newsletter.photo, F.photo)
async def newsletter_photo(message: Message, state: FSMContext):
    await message.delete()
    photo_file_id = message.photo[-1].file_id
    state_data = await state.get_data()
    await state.update_data(photo=photo_file_id)
    state_data["photo"] = photo_file_id
    await state.update_data(photo=state_data['photo'])
    await message.answer_photo(state_data['photo'],
                               f"{state_data['message']}\n"
                               f"<blockquote>–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                               f"{len(await get_users())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º </blockquote>",
                               reply_markup=inline_builder(
                                   ["‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"],
                                   ["confirm", "menu_after_photo"],
                                   [1]
                               ))
    await state.set_state(Newsletter.confirm)


@admin.message(AdminProtect(), Newsletter.photo, ~F.photo)
async def failed_photo(message: Message):
    await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùóÔ∏è")


@admin.callback_query(AdminProtect(), F.data == 'sup_cancel_admin')
async def newsletter_sup_cancel(message: CallbackQuery | Message, state: FSMContext):
    state_data = await state.get_data()
    await state.update_data(message=state_data['message'],
                            photo='None')
    await message.message.answer(f"{state_data['message']}\n"
                                 f"<blockquote>–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "
                                 f"{len(await get_users())} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º </blockquote>",
                                 reply_markup=inline_builder(
                                     ["‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"],
                                     ["confirm", "menu"],
                                     [1]
                                 ))
    await state.set_state(Newsletter.confirm)


@admin.callback_query(AdminProtect(), Newsletter.confirm, F.data == "confirm")
async def newsletter_confirm(query: CallbackQuery, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    await state.update_data(message=state_data['message'],
                            photo=state_data['photo'])

    if state_data["photo"] != "None":
        await query.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞.")
        for user in await get_users():
            await bot.send_photo(chat_id=user,
                                 photo=state_data['photo'],
                                 caption=state_data['message'])
        await query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        await query.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞.")
        for user in await get_users():
            await bot.send_message(user,
                                   state_data['message'])
        await query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()
