from aiogram.types import CallbackQuery,Message
from aiogram import Router,F, Bot
from aiogram.fsm.context import FSMContext

from app.bot.utils import get_quit_profile
from app.bot.keyboard import inline

router = Router()


@router.callback_query(F.data == "main_menu")
async def menu_call(query: CallbackQuery):
    await query.message.edit_text("üîÆ–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:", reply_markup=inline.main_menu)


@router.callback_query(F.data == "quit_profile")
async def quit_profile(query: CallbackQuery):
    await query.message.edit_text(get_quit_profile(), reply_markup=inline.quit_profile_kb_markup, disable_web_page_preview=True)


@router.callback_query(F.data == "pre_quit")
async def pre_quit_profile(query: CallbackQuery):
    await query.message.edit_text("""–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? üë£
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ! ‚ö†Ô∏è""",
                                  reply_markup=inline.log_out_for_sure_button)


@router.callback_query(F.data == "quit")
async def quit_profile(query: CallbackQuery):
    user_id = query.from_user.id
    await update_get_email_from(user_id, "None")
    await update_get_pwd_from(user_id, None)
    await update_sub(user_id, "none")
    await query.message.edit_text(text='''–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞! ü™´
–ñ–µ–ª–∞–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?''',
                                  reply_markup=inline_builder(
                                      ["üìá –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
                                      ["re_reg_gmail"]
                                  ))


#How Works
@router.callback_query(F.data=="how_work")
async def how_work_call(query:CallbackQuery):
    await query.message.edit_text( text='''
    üì© Shrink ‚Äî —Å–µ—Ä–≤–∏—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—á—Ç—ã –¥–ª—è –±–∏—Ç–º–µ–π–∫–µ—Ä–æ–≤

    –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –±–æ—Ç? (https://telegra.ph/Kak-rabotaet-Shrink-05-23)''', reply_markup=inline.back_to_main_menu_markup)


@router.callback_query(F.data=="profile")
async def my_profile(query:CallbackQuery):
    user_id = query.from_user.id
    if await get_email_from(user_id) != 'None':
        await query.message.edit_text(text=f"""üß∏ –ü—Ä–æ—Ñ–∏–ª—å {query.from_user.first_name}
‚Äî‚Äî‚Äî


‚úâÔ∏è Gmail:
‚îî {await get_email_from(user_id)}

üéü –ü–æ–¥–ø–∏—Å–∫–∞: 
‚îî {await get_premium(user_id)}
‚Äî‚Äî
<a href ="https://telegra.ph/Podklyuchaem-Google-Akkaunt--Le-Pair-02-01">–û –ø–æ–¥–ø–∏—Å–∫–∞—Ö </a>""",
                     reply_markup=inline_builder(
                         ["üß¨ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚¨Ö –ù–∞–∑–∞–¥"],
                         ["quit_profile", "main_menu"],
                         [1, 1]),
                     disable_web_page_preview=True,
                     parse_mode='html')
    else:
        await query.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ü§∑üèª‚Äç\nÔ∏è"
                                  "–ß—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚¨áÔ∏è",
                                  reply_markup=inline.profile)

#SUPPORT
@router.callback_query(F.data=="support")
async def support_call(query:CallbackQuery,state:FSMContext):
    print(query.from_user.id)
    await state.set_state(Sup.text)
    await query.message.answer("""üëÄ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∞ ‚¨áÔ∏è
<blockquote>–í–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∂–µ —Å—é–¥–∞!</blockquote>""",
                               parse_mode='html')


@router.callback_query(F.data=="sup_cancel")
async def sup_cancel_call(query:Message | CallbackQuery,state:FSMContext):
    state_data = await state.get_data()
    await state.update_data(photo='None')
    state_data["photo"] = 'None'
    formatted_text = []
    [
        formatted_text.append(f'{value}')
        for value in state_data.values()
    ]
    pattern=dict(text="<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –∂–∞–ª–æ–±—É, –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!</b>\n"
                                   f"<blockquote>{state_data["text"]}</blockquote>",reply_markup=inline_builder(
            ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","üóëÔ∏è –û—Ç–º–µ–Ω–∞"],
            ["agree_sup","fully_sup_cancel"]
        ))

    if isinstance(query,CallbackQuery):
        await query.message.delete()
        await query.message.answer(**pattern)

    await state.set_state(Sup.send)


@router.callback_query(F.data == "fully_sup_cancel")
async def fully_sup_cancel(query: CallbackQuery):
    global user_id
    user_id = query.from_user.id
    await query.message.delete()
    await query.message.answer("ü™¨ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
