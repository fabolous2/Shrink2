from typing import Annotated

from aiogram.types import CallbackQuery,Message
from aiogram import Router,F, Bot
from aiogram.fsm.context import FSMContext

from app.bot.utils import get_quit_profile, get_profile_content, get_registration_info,\
      get_how_the_bot_works, get_reg_start_info, get_without_sub_info, get_basic_sub_info,\
          get_premium_sub_info, get_basic_subscription_price, get_premium_subscription_price
from app.bot.keyboard import inline
from app.services import UserService
from app.bot.states.registration import RegistrationStatesGroup

from dishka.integrations.aiogram import inject, Depends

router = Router()

#! Main Menu
@router.callback_query(F.data == "main_menu")
async def menu_call(query: CallbackQuery):
    await query.message.edit_text("üîÆ–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:", reply_markup=inline.main_menu)


#! Logging Out of Profile
@router.callback_query(F.data == "quit_profile")
async def quit_profile(query: CallbackQuery):
    await query.message.edit_text(get_quit_profile(), reply_markup=inline.quit_profile_kb_markup, disable_web_page_preview=True)


@router.callback_query(F.data == "pre_quit")
async def pre_quit_profile(query: CallbackQuery):
    await query.message.edit_text("""–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? üë£
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ! ‚ö†Ô∏è""",
                                  reply_markup=inline.log_out_for_sure_button)


@router.callback_query(F.data == "quit")
async def quit_profile(query: CallbackQuery):
    user_id = query.from_user.id
    await update_get_email_from(user_id, "None")
    await update_get_pwd_from(user_id, None)
    await update_sub(user_id, "none")
    await query.message.edit_text(text='''–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞! ü™´
–ñ–µ–ª–∞–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?''', reply_markup=inline.profile_repeat_registration_kb_markup)


#! How The Bot Works
@router.callback_query(F.data == "how_work")
async def how_work_call(query:CallbackQuery):
    await query.message.edit_text(get_how_the_bot_works(), reply_markup=inline.back_to_main_menu_markup)


#! Getting User Profile Content
@router.callback_query(F.data == "profile")
async def get_user_profile_info(query: CallbackQuery, user_service: Annotated[UserService, Depends()]):
    user_id = query.from_user.id
    email_is_filled = await user_service.user_email_is_filled(user_id)

    if email_is_filled:
        await query.message.edit_text(get_profile_content(),
                                      reply_markup=inline.change_profile_markup,
                                      disable_web_page_preview=True)
        
    else:
        await query.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ü§∑üèª‚Äç\nÔ∏è"
                                  "–ß—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚¨áÔ∏è",
                                  reply_markup=inline.profile)


#!–ü–æ–ø—Ä–æ—Å–∏–ª–∏ –ø–æ–∫–∞ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
#SUPPORT
# @router.callback_query(F.data=="support")
# async def support_call(query:CallbackQuery,state:FSMContext):
#     print(query.from_user.id)
#     await state.set_state(Sup.text)
#     await query.message.answer("""üëÄ –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∞ ‚¨áÔ∏è
# <blockquote>–í–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∂–µ —Å—é–¥–∞!</blockquote>""",
#                                parse_mode='html')


# @router.callback_query(F.data=="sup_cancel")
# async def sup_cancel_call(query:Message | CallbackQuery,state:FSMContext):
#     state_data = await state.get_data()
#     await state.update_data(photo='None')
#     state_data["photo"] = 'None'
#     formatted_text = []
#     [
#         formatted_text.append(f'{value}')
#         for value in state_data.values()
#     ]
#     pattern=dict(text="<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –∂–∞–ª–æ–±—É, –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!</b>\n"
#                                    f"<blockquote>{state_data["text"]}</blockquote>",reply_markup=inline_builder(
#             ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å","üóëÔ∏è –û—Ç–º–µ–Ω–∞"],
#             ["agree_sup","fully_sup_cancel"]
#         ))

#     if isinstance(query,CallbackQuery):
#         await query.message.delete()
#         await query.message.answer(**pattern)

#     await state.set_state(Sup.send)


# @router.callback_query(F.data == "fully_sup_cancel")
# async def fully_sup_cancel(query: CallbackQuery):
#     global user_id
#     user_id = query.from_user.id
#     await query.message.delete()
#     await query.message.answer("ü™¨ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")



#! Cancel
@router.callback_query(F.data == "cancel")
async def cancel_call(query: CallbackQuery):
    await query.message.delete()


#! Auto-Mailing call
@router.callback_query(F.data=="auto_mailing")
async def auto_mailing_call(query:CallbackQuery):
    await query.message.edit_text("üìÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:",reply_markup=inline_builder(
        ['‚úâÔ∏è –ü–æ—á—Ç—ã','üéπ –ë–∏—Ç—ã','‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['add_email','add_audio','settings'],
        [2,1]
    ))


#! Auto-Mailing Settings
@router.callback_query(F.data == "settings")
async def settings_call(query: CallbackQuery):
    info = await get_email_info(user_id=query.from_user.id)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ,—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–∏—Å—å–º–µ\n"
                                  "<b>–°–µ–π—á–∞—Å –≤–∞—à–µ –ø–∏—Å—å–º–æ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:</b>\n\n"
                                  f"‚Ä¢–ó–∞–≥–æ–ª–æ–≤–æ–∫: <u>{info[0]}</u>\n"
                                  f"‚Ä¢–û–ø–∏—Å–∞–Ω–∏–µ: <u>{info[1]}</u>\n"
                                  f"‚Ä¢–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: <u>{info[2]}</u>\n"
                                  f"‚Ä¢–ö–æ–ª-–≤–æ –∞—É–¥–∏–æ –≤ –ø–∏—Å—å–º–µ –∑–∞ —Ä–∞–∑: <u>{info[3]}</u>", reply_markup=inline_builder(
        ["–û–ø–∏—Å–∞–Ω–∏–µ+–∑–∞–≥–æ–ª–æ–≤–æ–∫", "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", "–ö–æ–ª-–≤–æ –∞—É–¥–∏–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"],
        ["description", "mail_time", "quantity"],
        [2, 1]
    ))


@router.callback_query(F.data == "quantity")
async def quantity_call(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∞—É–¥–∏–æ –≤ –ø–∏—Å—å–º–µ(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2)")
    await state.set_state(QuantyMail.quanty)


@router.callback_query(F.data == "description")
async def desc_call(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ç–µ–º—É –∫ –≤–∞—à–∏–º –±—É–¥—É—â–∏–º –ø–∏—Å—å–º–∞–º")
    await state.set_state(MailDescription.header)


@router.callback_query(F.data == "mail_time")
async def mail_time_call(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: (—á–∞—Å):(–º–∏–Ω—É—Ç–∞) ")
    await state.set_state(QuantyMail.mail_time)


#! Self-Mailing
@router.callback_query(F.data == "self_mailing")
async def self_mailing_call(query:CallbackQuery,state:FSMContext):
    await query.message.answer("""–û—Ç–ø—Ä–∞–≤—å—Ç–µ email-–∞–¥—Ä–µ—Å–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ üì≠ 
    <blockquote>(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ª–∏–±–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</blockquote>""",
                               parse_mode='html')
    await state.set_state(Mailing.get_emails)


#! Audio-list Actions
@router.callback_query(F.data == "add_audio")
async def add_audio_call(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ üéµ")
    await state.set_state(Mailing.get_audio)


@router.callback_query(F.data == "del_audio")
async def del_audio_call(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∞—É–¥–∏–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    await state.set_state(Del_audio.audio_to_del)
